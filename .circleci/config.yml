# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  terraform: circleci/terraform@3.0.0

jobs:
  packer-build:
    docker:
      - image: hashicorp/packer
    resource_class: small
    steps:
      - checkout
      - run:
          name: Initialize
          command: packer init ./packer
      - run:
          name: Validate
          command: packer validate ./packer
      - run:
          name: Format
          command: packer fmt -check -diff ./packer
      - run:
          name: Build AMI
          command: packer build ./packer
          no_output_timeout: 15m

  ansible-playbook:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            pip install ansible boto3
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
      - run:
          name: Deploy Ansible Playbook
          command: |
            # Get Security Group ID
            SG_ID=$(aws ec2 describe-security-groups --filters \
              "Name=tag:Name,Values=Woodybox-Inbound-SSH" --query \
              'SecurityGroups[].GroupId' | jq -r '.[]')
            # Get the public IP of the current CircleCI runner
            PUBLIC_IP=$(curl ipinfo.io/ip)
            # Add an ingress rule to the security group
            aws ec2 authorize-security-group-ingress --group-id $SG_ID \
              --protocol tcp --port 22 --cidr $PUBLIC_IP/32
            sleep 5
            # Deploy Ansible Playbook
            cd ansible
            ansible-playbook ec2-host.yml -i inventory --diff
            # Remove the ingress rule
            aws ec2 revoke-security-group-ingress --group-id $SG_ID \
              --protocol tcp --port 22 --cidr $PUBLIC_IP/32

workflows:
  version: 2
  packer_build:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["Packer Build", << pipeline.schedule.name >>]
    jobs:
      - packer-build:
          context: aws
  deploy_infrastructure:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - terraform/fmt:
          path: ./terraform
          checkout: true
      - terraform/validate:
          path: ./terraform
          checkout: true
          context: aws
          requires:
            - terraform/fmt
      - terraform/plan:
          path: ./terraform
          checkout: true
          context: aws
          persist-workspace: true
          requires:
            - terraform/validate
      - hold:
          type: approval
          filters:
            branches:
              only: main
          requires:
            - terraform/plan
      - terraform/apply:
          path: ./terraform
          attach-workspace: true
          context: aws
          filters:
            branches:
              only: main
          requires:
            - hold
      - ansible-playbook:
          context: aws
          filters:
            branches:
              only: main
          requires:
            - terraform/apply
